/*
 * Finger boards work when plugged into external SCL/SDA line from another arduino
 *    Finger boards work when SCL/SDA is directly inputted into I2C mux output
 *    Test board works when I2C Mux input pull up resistors are bypassed   
 * Address of DA7280- 0x4A
 * 
 */
#include <Wire.h> 
#include "Haptic_Driver.h"
#define IIM42351_ADDRESS 0x68 
//#include <nRF52_MBED_PWM.h>
//#include <NRF52_MBED_TimerInterrupt.h>
//#define DA7280_I2C_ADDRESS 0x48    // I2C address of the DA7280

Haptic_Driver hapDrive;

int event = 0;
uint8_t bus=0;
int cycle_count=1;
unsigned long previousMillis=0;
const long interval= 130;

void TCA9544A(uint8_t bus)
{
  Wire.beginTransmission(0x70);  // TCA9544A address
  Wire.write(0x4|bus);
//  Wire.write(1 << bus);          // send byte to select bus 
  Wire.endTransmission();
}



void setup(){

//  pinMode(VBB_PIN, OUTPUT);
  Wire.begin();
//  Wire.beginTransmission(0x70);  // TCA9544A address
//  while ( !Serial );
  Serial.begin(115200);
  
  delay(2);
  for (int i=3; i<7; i++)
  {
    TCA9544A(i);
    TwoWire &wirePort = Wire;
    hapDrive._i2cPort = &wirePort;
//  if( !hapDrive.begin())
//    Serial.println("Could not communicate with Haptic Driver.");
//  else
//    Serial.println("Qwiic Haptic Driver DA7280 found!");
//    Serial.println("Ready.");
    hapDrive._writeRegister(CHIP_REV_REG, 0xBA, 0xBA, 1);
    uint8_t temp =  hapDrive._readRegister(CHIP_REV_REG); 
    Serial.println(temp);
  if( !hapDrive.defaultMotor() ) 
    Serial.println("Could not set default settings.");
  else
    Serial.println("Ready.");
/*
  hapDrive.setOperationMode(DRO_MODE);
//  hapDrive.enableFreqTrack(true);
  hapDrive.setActuatorNOMVolt(2.5);                 //Nominal Voltage (VRMS) of Actuator 2.5
  hapDrive.setActuatorABSVolt(3.536);               //Max Voltage of actuator 3.536
  hapDrive.setActuatorIMAX(240);                //Max Current of actuator
  hapDrive.setActuatorLRAfreq(170);
*/

  initializeIIM42351();
  setDefaultSENSOR_CONFIG0();
  hapDrive.setOperationMode(DRO_MODE);
//  hapDrive.enableFreqTrack(true);
  hapDrive.setActuatorNOMVolt(1.5);                 //Nominal Voltage (VRMS) of Actuator 2.5
  hapDrive.setActuatorABSVolt(3);               //Max Voltage of actuator 3.536
  hapDrive.setActuatorIMAX(200);                //Max Current of actuator
  hapDrive.setActuatorLRAfreq(170);
//  hapDrive._writeRegister(TOP_INT_CFG1, 0x1E,0x1E,0);

  delay(100);
  }
}
  

void loop() {

    int exclusion[4];
    int bus_count= 0;

    
    while(bus_count<4)
    {
      int randbus= random(3,7);
      bool isDuplicate = false;
      for (int i = 0; i < bus_count; i++) 
      {
        if (randbus == exclusion[i]) 
        { 
          isDuplicate = true;
          break; // Exit the loop if a duplicate is found
        }
      }
      if (!isDuplicate) 
      {
        TCA9544A(randbus);
 //     Serial.println(randbus); 
        while(millis()-previousMillis<interval)
        {
          event = hapDrive.getIrqEvent();       //If uploading often the Haptic Driver IC will throw a fault
          hapDrive.clearIrq(event);             //Clearing error 
          hapDrive.setVibrate(127);
          float zAcceleration = readZAcceleration();
          Serial.print("Z Acceleration: "); 
          Serial.print(zAcceleration); 
          Serial.println(" g");
          Serial.print("Z Acceleration (16-bit binary): ");
          Serial.print(zAcceleration, BIN);
          Serial.println(" g");
        }
        while(millis()-previousMillis>interval)
        {
          hapDrive.setVibrate(0);
          delay(30);
          previousMillis = millis(); // Save the last time LRA was triggered
        }
        exclusion[bus_count] = randbus;
        bus_count++;
 //       Serial.println(randbus);
      }
    }
    cycle_count++;
//    Serial.println(cycle_count);
    if (cycle_count % 3 == 0) 
    {
      delay(1500);
      previousMillis = millis(); // Reset previousMillis
    }
} 


void initializeIIM42351() {

  // Set ACCEL_CONFIG0 register to configure acceleration scale and output data rate
  Wire.beginTransmission(IIM42351_ADDRESS);
  Wire.write(80); // Start from register address ACCEL_CONFIG0
  // Set accel_odr to 0011 (bits 3, 2, 1, 0)- 8000hz and accel_fs_sel to 001 (bits 7, 6, 5)- 8g
  Wire.write((0b0011 << 0) | (0b001 << 5));
  Wire.endTransmission();
}

void setDefaultSENSOR_CONFIG0() {
  // Set SENSOR_CONFIG0 register to default value (0xB8)
  Wire.beginTransmission(IIM42351_ADDRESS);
  Wire.write(0x03); // Start from register address SENSOR_CONFIG0
  Wire.write(0xB8); // Write default value
  Wire.endTransmission();
  Wire.beginTransmission(IIM42351_ADDRESS);
  Wire.write(78); // Start from register address PWR_MGMT0
  Wire.write(0x03); // Write accel to LN mode
  Wire.endTransmission();
}


float readZAcceleration() {
  Wire.beginTransmission(IIM42351_ADDRESS);
  Wire.write(35); // Start from register address ACCEL_DATA_Z1

  Wire.endTransmission(false);
  
  Wire.requestFrom(IIM42351_ADDRESS, 2, true);
  int16_t zRawData = (Wire.read() << 8 | Wire.read());

  // Convert to g's (assuming a full-scale range of ±2g)
  float zAcceleration = static_cast<float>(zRawData) / 4096.0; // 4096 is the scale factor for ±2g range
  return zAcceleration;
  return zRawData;
}